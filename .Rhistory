h_vals <- h0(t_grid%*%const, val$theta, val$basis_params)
asy_h_sd <- sqrt(diag(compute_hazard_covariance(val, compute_covariance_matrix(val,return_F = T), t_grid%*%const)))
lty_ <- colors <- c("Hazard" = 1, "95% ASY.CI"=2)
colors <- c("Hazard" = "red", "95% ASY.CI"="grey30")
fills <- c("Hazard" = "red", "95% ASY.CI"="grey30")
ggplot(data = data.frame(x = t_grid))+
geom_line(aes(x, y  = h_vals, col = "Hazard", lty = "Hazard")) +
geom_line(aes(x, y  = h_vals + 1.96*asy_h_sd, col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_line(aes(x, y  = h_vals - 1.96*asy_h_sd, col = "95% ASY.CI", lty = "95% ASY.CI")) +
geom_ribbon(aes(x = x, ymin = h_vals - 1.96*asy_h_sd,ymax = h_vals + 1.96*asy_h_sd),
fill= "Orange", alpha = 0.1)+
theme_minimal() + xlab("Follow-up(years)") + ylab("Hazard Rate") +
scale_x_continuous(breaks = seq(0, year_max, 2),expand = c(0,0.05)) +
scale_y_continuous(breaks = seq(0, 1.2, 0.2), limits = c(0,1),expand = c(0, 0)) +
# labs(title = "Baseline Hazard for Melanoma Recurrence")  +
# coord_cartesian(ylim = c(0, 1.2),clip = "off") + #xlim = c(0, 1.5),
scale_color_manual(name = "same", values = colors)  +
scale_linetype_manual(name = "same",values = lty_) +
theme(legend.position = c(0.8, 0.75),legend.title = element_blank(), legend.background = element_rect(fill="white",color = "white"),
legend.text = element_text(face="bold", size = 14,family = "serif"),
axis.title.x = element_text( size = 14,family = "serif"),
axis.title.y = element_text( size = 14,family = "serif"),
plot.title = element_text(face = "bold", size = 16, hjust = 0, family = "serif"))
curve(h0(x, output$theta, output$basis_params), add=TRUE, col="blue")
curve(h0(x, output$theta, output$basis_params), add=TRUE, col="blue")
curve(3 * x^2, xlim=c(0, 2), col="red",main = 17)
curve(h0(x, output$theta, output$basis_params), add=TRUE, col="blue")
curve(h0(x, output$theta, output$basis_params), col="blue")
curve(h0(x, output$theta, output$basis_params), col="blue", xlim = (0,10))
curve(h0(x, output$theta, output$basis_params), col="blue", xlim = (0,10))
curve(h0(x, output$theta, output$basis_params), col="blue", xlim = c(0,10))
curve(h0(x, output$theta, output$basis_params), col="blue", xlim = c(0,2))
output$y[output$delta==1])
output$y[output$delta==1]
output$k
max(output$k)
curve(h0(x, output$theta, output$basis_params), col="blue", xlim = c(0, max(output$k)))
curve(h0(x, output$theta, output$basis_params), col="blue", xlim = c(0, max(output$k)*0.9))
max(output$k[output$delta==1])
curve(h0(x, output$theta, output$basis_params), col="blue", xlim = c(0, max(output$k[output$delta==1]))
curve(h0(x, output$theta, output$basis_params), col="blue", xlim = c(0, max(output$k[output$delta==1])))
curve(h0(x, output$theta, output$basis_params), col="blue", xlim = c(0, max(output$k[output$delta==1])))
curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates")
curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0]))
curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)))
curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
tmep <- curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
tmep
sss <- curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
sss
curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
sss <- curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
sss
asy_h_sd
compute_hazard_covariance(val, compute_covariance_matrix(val,return_F = T))
curve(diag(compute_hazard_covariance(val, compute_covariance_matrix(val,return_F = T), x)))
curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
curve(diag(compute_hazard_covariance(val, compute_covariance_matrix(val,return_F = T), x)), add = T)
curve(h0(x, output$theta, output$basis_params)+1.96*diag(compute_hazard_covariance(val, compute_covariance_matrix(val,return_F = T), x)), add = T)
curve(h0(x, output$theta, output$basis_params)+1.96*diag(compute_hazard_covariance(val, compute_covariance_matrix(val,return_F = T), x)), add = T)
curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
curve(h0(x, output$theta, output$basis_params)+1.96*diag(compute_hazard_covariance(val, compute_covariance_matrix(val,return_F = T), x)), add = T)
curve(h0(x, output$theta, output$basis_params)-1.96*diag(compute_hazard_covariance(val, compute_covariance_matrix(val,return_F = T), x)), add = T)
plot(val$h)
use_r("hz_plot")
curve(h0(x, output$theta, output$basis_params),
col="black",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
document()
text <-  curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
text <-  curve(h0(x, output$theta, output$basis_params),
col="blue",
xlim = c(0, max(output$k[output$delta==1])),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
predict.h <- list()
seq(0, max(output$k[output$delta==1]), 0.01)
predict.h[[h]] <- h0(x, output$theta, output$basis_params)
predict.h[[x]] <- seq(0, max(output$k[output$delta==1]), 0.01)
predict.h[["x"]] <- seq(0, max(output$k[output$delta==1]), 0.01)
predict.h
document()
document()
document()
load_all()
output <- aftsur(ptces)
predict.h[["x"]]
document()
load_all()
output <- aftsur(ptces)
hz_plot(output)
predict.h
predict.h$s = 1
predict.h
document()
load_all()
output <- aftsur(ptces)
hz_plot(output)
output$predict
output$predict$x
plot(output$predict$x, output$predict$h)
plot(output$predict$x, output$predict$h, lty = 1)
plot(output$predict$x, output$predict$h, type = "l")
plot(output$predict$x, output$predict$h, type = "l", main = "Baseline Hazard Estimates",,ylab = expression(h[0](t)), xlab = expression(kappa))
plot(output$predict$x, output$predict$h, type = "l", main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
document()
load_all()
hz_plot(output)
output$predict$h
document()
load_all()
output <- aftsur(ptces)
hz_plot(output)
xlim = c(0, max(x)), ylim = c(0, max(y)),
main = "Baseline Hazard Estimates",ylab = expression(h[0](t)), xlab = expression(kappa))
plot(x = output$predict.h$x, y = output$predict.h$h, type = "l",
xlim = c(0, max(x)), ylim = c(0, max(y)),main = "Baseline Hazard Estimates", ylab = expression(h[0](t)), xlab = expression(kappa))
plot(x = output$predict.h$x, y = output$predict.h$h, type = "l",
xlim = c(0, max( output$predict.h$x)), ylim = c(0, max( output$predict.h$h)),main = "Baseline Hazard Estimates", ylab = expression(h[0](t)), xlab = expression(kappa))
c(0, max( output$predict.h$h))
output$predict.h$h
output$predict.h$x
document()
load_all()
output <- aftsur(ptces)
output$predict
hz_plot(output)
output$predict.h$x
output$predict.h
output$
output$predict
output$predict$x
plot(output$predict$x, output$predict$h)
output
max(output$predict$x)
document()
load_all()
output <- aftsur(ptces)
hz_plot(output)
output$predict.h$x
output$predic$x
output$predict.h$x
output$predi$x
document()
load_all()
output <- aftsur(ptces)
hz_plot(output)
document()
load_all()
output <- aftsur(ptces)
hz_plot()
hz_plot(output)
hz_plot(output)
check()
ptces
model.frame(~ X1+X2,data)
model.frame(y_L~ X1+X2,data)
model.frame(y_L+y_R~ X1+X2,data)
model.frame( X1+X2+X3,data)
model.frame( ~X1+X2+X3,data)
model.frame( ~X1+X2+X3-1,data)
model.frame( ~X1+X2+X3+1,data)
temp <- function(~ x1+x2+x3, data ){
}
data
ptces
temp <- function(~ x1+x2+x3, data){
model.frame( ~X1+X2+X3, ptces)
}
model.frame( ~X1+X2+X3, ptces)}
model.frame( ~X1+X2+X3, ptces)
temp <- function(~ x1+x2+x3, data)model.frame( ~X1+X2+X3, ptces)
temp <- function(foumula = x1+x2+x3, data)model.frame( ~foumula, ptces)
temp()
temp <- function(foumula = X1+X2+X3, data)model.frame( ~foumula, ptces)
temp()
temp <- function(foumula = ~X1 + X2 + X3, data)model.frame( foumula, ptces)
temp()
ptces
model.frame(formula_aft, data)
temp <- function(foumula = ~ Z1 + Z2 + Z3, data)model.frame( foumula, ptces)
temp()
temp <- function(foumula = ~ Z1 + Z2 + Z3, data)model.frame( foumula, ptces)
temp()
Z <- model.frame(formula_logit, data)
temp()
tibble(temp())
tibble(temp(),temp() )
tibble(temp(),temp())
tibble(temp(),model.frame( ~ X1 + X2 + X3, ptces))
tibble(temp(),model.frame( ~ Z1 + X2 + X3, ptces))
paste("Z", 1:2)
paste0("Z", 1:2)
paste0("Z", 1:dim(temp()))
paste0("Z", 1:dim(temp())[2])
cens_status <- ptces %>% select(delta, deltaL ,deltaR, deltaI)
formula_aft = ~X1
formula_aft = ~X1 + X2 + X3
formula_logit = ~Z1 + Z2 + Z3
data = ptces
X <- model.frame(formula_aft, data)
colnames(X) <- paste0("X", 1:dim(X)[2])
X
Z <- model.frame(formula_logit, data)
colnames(Z) <- paste0("Z", 1:dim(Z)[2])
cens_status
colnames(cens_status) <- c("delta", "deltaL",  "deltaR", "deltaI")
tibble(X,Z, cens_status )
model.frame(formula_logit, data)
model.frame(cbind(y_L, y_R), data)
model.frame(cbind(y_L, y_R)~Z1, data)
ptces %>% select(cens_status)
ptces %>% select(!cens_status)
ptces %>% select(!!cens_status)
ptces %>% select(cens_status)
cens_status
cens_status <- c("delta", "deltaL",  "deltaR", "deltaI")
ptces %>% select(cens_status)
X
cens_status
ptces %>% select("delta", "deltaL",  "deltaR", "deltaI")
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit= Z1+Z2+Z3, y_L=ptces$y_L, y_R = ptces$y_R,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
aftsur(formula_aft = ~X1+X2+X3, formula_logit= ~Z1+Z2+Z3, y_L=ptces$y_L, y_R = ptces$y_R,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit= ~Z1+Z2+Z3,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit= ~Z1+Z2+Z3,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
aftsur(formula_aft = cbind(y_L, y_R)~X1+X2+X3, formula_logit= cbind(y_L, y_R)~Z1+Z2+Z3,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
paste0("X", 1:dim(X)[2])
ptces[,paste0("X", 1:dim(X)[2])]
document()
load
load_all()
aftsur(formula_aft = cbind(y_L, y_R)~X1+X2+X3, formula_logit= cbind(y_L, y_R)~Z1+Z2+Z3,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit= ~Z1+Z2+Z3, y_L = ptces$y_L, y_R = ptces$y_R,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit= ~Z1+Z2+Z3, y_L = ptces$y_L, y_R = ptces$y_R,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
aftsur(formula_aft = ~X1+X2+X3, formula_logit= ~Z1+Z2, y_L = ptces$y_L, y_R = ptces$y_R,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
aftsur(formula_aft = ~X1+X2+X3, formula_logit= ~Z1, y_L = ptces$y_L, y_R = ptces$y_R,
cens_status = ptces %>% select("delta", "deltaL",  "deltaR", "deltaI"), ptces, na.action = na.omit)
document()
load_all()
check()
document()
load_all()
check()
check()
document()
load_all()
check()
library(devtools)
document()
document()
load_all()
library(aftQnP)
library(devtools)
check()
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
document()
load_all()
check()
document()
document()
load_all()
checl()
check()
library(aftQnP)
aftsur??
?aftsur
?aftsur()
detach("package:aftQnP", unload = TRUE)
library(aftQnP)
install(build_vignettes = TRUE)
library(devtools)
install(build_vignettes = TRUE)
document()
load_all()
check()
install(build_vignettes = TRUE)
library(devtools)
?model.frame()
model.frame(delta, deltaL, data(ptces))
data(ptces)
ptces
model.frame(delta, deltaL, ptces)
model.frame(delta+deltaL, ptces)
model.frame(c(delta, deltaL), ptces)
model.frame(~delta+deltaL, ptces)
document()
load_all()
aftsur(formula_aft = ~X1+X2, formula_logit = ~Z1+Z2,
cens_status = ptces[,7:10], y_L =ptces$y_L, y_R = ptces$y_R,knots = 4,
data = ptces)
tmp <- aftsur(formula_aft = ~X1+X2, formula_logit = ~Z1+Z2,
cens_status = ptces[,7:10], y_L =ptces$y_L, y_R = ptces$y_R,knots = 4,
data = ptces)
tmp$lambda
cat("\n")
cat("\nPenalised log-likelihood:")
cat(paste("\nPenalised log-likelihood:", 3))
document()
load_all()
tmp <- aftsur(formula_aft = ~X1+X2, formula_logit = ~Z1+Z2,
cens_status = ptces[,7:10], y_L =ptces$y_L, y_R = ptces$y_R,knots = 4,
data = ptces)
cat(paste("\nPenalised log-likelihood:", 100))
cat(paste("\nPenalised log-likelihood:", 100, "\n"))
document()
load_all()
tmp <- aftsur(formula_aft = ~X1+X2, formula_logit = ~Z1+Z2,
cens_status = ptces[,7:10], y_L =ptces$y_L, y_R = ptces$y_R,knots = 4,
data = ptces)
document()
load_all()
aftsur(formula_aft = ~X1+X2, formula_logit = ~Z1+Z2,
cens_status = ptces[,7:10], y_L =ptces$y_L, y_R = ptces$y_R,knots = 4,
data = ptces)
tmp <- aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ptces[,7:10], y_L =ptces$y_L, y_R = ptces$y_R,knots = 4,
data = ptces)
ptces[,7:10]
tmp <- aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ptces[,7:10], y_L =ptces$y_L, y_R = ptces$y_R,knots = 4,
data = ptces)
hz_plot(tmp)
data("ptces")
ptces
ptces[,7:10]
aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ptces[,7:10], y_L =ptces$y_L, y_R = ptces$y_R,knots = 4,
data = ptces)
aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ptces %>% select(delta, deltaL, deltaR, deltaI)
y_L =ptces$y_L, y_R = ptces$y_R,knots = 4,
data = ptces)
aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ptces %>% select(delta, deltaL, deltaR, deltaI),
y_L =ptces$y_L, y_R = ptces$y_R, knots = 4,
data = ptces)
aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ptces %>% select(delta, deltaL, deltaR, deltaI),
y_L =ptces$y_L, y_R = ptces$y_R, knots = 4,
data = ptces)
aftsur(formula_aft = ~X1 + X2 + X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ~delta + deltaL + deltaR + deltaI),
y_L =ptces$y_L, y_R = ptces$y_R, knots = 4,
data = ptces)
aftsur(formula_aft = ~X1 + X2 + X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ~delta + deltaL + deltaR + deltaI,
y_L =ptces$y_L, y_R = ptces$y_R, knots = 4,
data = ptces)
ptces
sum(ptces$delta)
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ~delta+deltaL+deltaR+deltaI, y_L = ptces$y_L, y_R = ptces$y_R,data = ptces,lambda = 1e-5,knots = 4)
formula_aft = ~X1+X2+X3
formula_logit = ~Z1+Z2+Z3
cens_status = ~delta+deltaL+deltaR+deltaI
y_L = ptces$y_L
y_R = ptces$y_R
y_L
data = ptces
lambda = 1e-5
knots = 4
num_knots <- ifelse(!is.null(knots), knots, ifelse(dim(data)[1]<500, 4, ifelse(dim(data)[1]<1000, 5, 6)))
X <- model.frame(formula_aft, data)
colnames(X) <- paste0("X", 1:dim(X)[2])
Z <- model.frame(formula_logit, data)
colnames(Z) <- paste0("Z", 1:dim(Z)[2])
cens_status <- model.frame(cens_status, data)
colnames(cens_status) <- c("delta", "deltaL",  "deltaR", "deltaI")
num_knots
data <- tibble(X, Z, cens_status, y_L, y_R)
data_tmp <- data %>% mutate(y = ifelse(deltaL!=1 , y_L, y_R))
data_tmp_append <- data_tmp %>% filter(deltaI==1) %>% mutate(y = y_R, deltaI = 2)
data <- rbind(data_tmp, data_tmp_append)
data
colSums(data)
data <- na.action(data)
colSums(data)
data
data
na.action(data)
data
rbind(data_tmp, data_tmp_append)
data <- rbind(data_tmp, data_tmp_append)
na.action(data)
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ~delta+deltaL+deltaR+deltaI, y_L = ptces$y_L, y_R = ptces$y_R,data = ptces,lambda = 1e-5,knots = 4)
num_knots <- ifelse(!is.null(knots), knots, ifelse(dim(data)[1]<500, 4, ifelse(dim(data)[1]<1000, 5, 6)))
X <- model.frame(formula_aft, data)
colnames(X) <- paste0("X", 1:dim(X)[2])
Z <- model.frame(formula_logit, data)
colnames(Z) <- paste0("Z", 1:dim(Z)[2])
cens_status <- model.frame(cens_status, data)
colnames(cens_status) <- c("delta", "deltaL",  "deltaR", "deltaI")
data <- tibble(X, Z, cens_status, y_L, y_R)
data_tmp <- data %>% mutate(y = ifelse(deltaL!=1 , y_L, y_R))
data_tmp_append <- data_tmp %>% filter(deltaI==1) %>% mutate(y = y_R, deltaI = 2)
data <- rbind(data_tmp, data_tmp_append)
X <- as.matrix(data[, colnames(X)])
Z <- as.matrix(data[, colnames(Z)])
y <- data$y
delta <- data$delta
deltaL <- data$deltaL
deltaR <- data$deltaR
deltaI_L <- as.numeric(data$deltaI == 1)
deltaI_R <- as.numeric(data$deltaI == 2)
MAX_CTR <- 10000
rep(0, dim(X)[2])
beta <- rep(0, dim(X)[2])
gamma <- rep(0, dim(Z)[2])
theta <- rep(1,  num_knots)
initialise_values_list(X, Z, y,
delta, deltaL, deltaR, deltaI_L, deltaI_R,
beta, gamma, theta, lambda, num_knots)
val <- initialise_values_list(X, Z, y,
delta, deltaL, deltaR, deltaI_L, deltaI_R,
beta, gamma, theta, lambda, num_knots)
val$beta
val$basis_params
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ~delta+deltaL+deltaR+deltaI, y_L = ptces$y_L, y_R = ptces$y_R,data = ptces,lambda = 1e-5,knots = 4)
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ~delta+deltaL+deltaR+deltaI, y_L = ptces$y_L, y_R = ptces$y_R,data = ptces,lambda = 1e-5,knots = 4)
cat("---------------------------------------------------------------------------")
cat("\nSemi-parametric Accelerated Failure Time Mixture Cured Model Using MPL\n")
document()
load_all()
aftsur(formula_aft = ~X1+X2+X3, formula_logit = ~Z1+Z2+Z3,
cens_status = ~delta+deltaL+deltaR+deltaI, y_L = ptces$y_L, y_R = ptces$y_R,data = ptces,lambda = 1e-5,knots = 4)
document()
load_all()
check()
document()
load_all()
install(build_vignettes = TRUE)
document()
load_all()
install(build_vignettes = TRUE)
document()
load_all()
document()
document()
document()
load_all()
install(build_vignettes = TRUE)
